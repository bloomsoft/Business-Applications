'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsResults
    Inherits DataSet
    
    Private tableExamResultVW As ExamResultVWDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ExamResultVW")) Is Nothing) Then
                Me.Tables.Add(New ExamResultVWDataTable(ds.Tables("ExamResultVW")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ExamResultVW As ExamResultVWDataTable
        Get
            Return Me.tableExamResultVW
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsResults = CType(MyBase.Clone,DsResults)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("ExamResultVW")) Is Nothing) Then
            Me.Tables.Add(New ExamResultVWDataTable(ds.Tables("ExamResultVW")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableExamResultVW = CType(Me.Tables("ExamResultVW"),ExamResultVWDataTable)
        If (Not (Me.tableExamResultVW) Is Nothing) Then
            Me.tableExamResultVW.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsResults"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsResults.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableExamResultVW = New ExamResultVWDataTable
        Me.Tables.Add(Me.tableExamResultVW)
    End Sub
    
    Private Function ShouldSerializeExamResultVW() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ExamResultVWRowChangeEventHandler(ByVal sender As Object, ByVal e As ExamResultVWRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ExamResultVWDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRegNo As DataColumn
        
        Private columnExamYear As DataColumn
        
        Private columnExamTerm As DataColumn
        
        Private columnSubject As DataColumn
        
        Private columnObtained As DataColumn
        
        Private columnOutof As DataColumn
        
        Private columnGrade As DataColumn
        
        Private columnExamDate As DataColumn
        
        Private column_STUDENTS_NAME As DataColumn
        
        Private columnFRNAME As DataColumn
        
        Private columnSECTIONNAME As DataColumn
        
        Private column_CLASSMAIN_NAME As DataColumn
        
        Friend Sub New()
            MyBase.New("ExamResultVW")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RegNoColumn As DataColumn
            Get
                Return Me.columnRegNo
            End Get
        End Property
        
        Friend ReadOnly Property ExamYearColumn As DataColumn
            Get
                Return Me.columnExamYear
            End Get
        End Property
        
        Friend ReadOnly Property ExamTermColumn As DataColumn
            Get
                Return Me.columnExamTerm
            End Get
        End Property
        
        Friend ReadOnly Property SubjectColumn As DataColumn
            Get
                Return Me.columnSubject
            End Get
        End Property
        
        Friend ReadOnly Property ObtainedColumn As DataColumn
            Get
                Return Me.columnObtained
            End Get
        End Property
        
        Friend ReadOnly Property OutofColumn As DataColumn
            Get
                Return Me.columnOutof
            End Get
        End Property
        
        Friend ReadOnly Property GradeColumn As DataColumn
            Get
                Return Me.columnGrade
            End Get
        End Property
        
        Friend ReadOnly Property ExamDateColumn As DataColumn
            Get
                Return Me.columnExamDate
            End Get
        End Property
        
        Friend ReadOnly Property _STUDENTS_NAMEColumn As DataColumn
            Get
                Return Me.column_STUDENTS_NAME
            End Get
        End Property
        
        Friend ReadOnly Property FRNAMEColumn As DataColumn
            Get
                Return Me.columnFRNAME
            End Get
        End Property
        
        Friend ReadOnly Property SECTIONNAMEColumn As DataColumn
            Get
                Return Me.columnSECTIONNAME
            End Get
        End Property
        
        Friend ReadOnly Property _CLASSMAIN_NAMEColumn As DataColumn
            Get
                Return Me.column_CLASSMAIN_NAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ExamResultVWRow
            Get
                Return CType(Me.Rows(index),ExamResultVWRow)
            End Get
        End Property
        
        Public Event ExamResultVWRowChanged As ExamResultVWRowChangeEventHandler
        
        Public Event ExamResultVWRowChanging As ExamResultVWRowChangeEventHandler
        
        Public Event ExamResultVWRowDeleted As ExamResultVWRowChangeEventHandler
        
        Public Event ExamResultVWRowDeleting As ExamResultVWRowChangeEventHandler
        
        Public Overloads Sub AddExamResultVWRow(ByVal row As ExamResultVWRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddExamResultVWRow(ByVal RegNo As Double, ByVal ExamYear As Integer, ByVal ExamTerm As Integer, ByVal Subject As String, ByVal Obtained As Double, ByVal Outof As Double, ByVal Grade As String, ByVal ExamDate As Date, ByVal _STUDENTS_NAME As String, ByVal FRNAME As String, ByVal SECTIONNAME As String, ByVal _CLASSMAIN_NAME As String) As ExamResultVWRow
            Dim rowExamResultVWRow As ExamResultVWRow = CType(Me.NewRow,ExamResultVWRow)
            rowExamResultVWRow.ItemArray = New Object() {RegNo, ExamYear, ExamTerm, Subject, Obtained, Outof, Grade, ExamDate, _STUDENTS_NAME, FRNAME, SECTIONNAME, _CLASSMAIN_NAME}
            Me.Rows.Add(rowExamResultVWRow)
            Return rowExamResultVWRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ExamResultVWDataTable = CType(MyBase.Clone,ExamResultVWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ExamResultVWDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRegNo = Me.Columns("RegNo")
            Me.columnExamYear = Me.Columns("ExamYear")
            Me.columnExamTerm = Me.Columns("ExamTerm")
            Me.columnSubject = Me.Columns("Subject")
            Me.columnObtained = Me.Columns("Obtained")
            Me.columnOutof = Me.Columns("Outof")
            Me.columnGrade = Me.Columns("Grade")
            Me.columnExamDate = Me.Columns("ExamDate")
            Me.column_STUDENTS_NAME = Me.Columns("STUDENTS.NAME")
            Me.columnFRNAME = Me.Columns("FRNAME")
            Me.columnSECTIONNAME = Me.Columns("SECTIONNAME")
            Me.column_CLASSMAIN_NAME = Me.Columns("CLASSMAIN.NAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnRegNo = New DataColumn("RegNo", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRegNo)
            Me.columnExamYear = New DataColumn("ExamYear", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExamYear)
            Me.columnExamTerm = New DataColumn("ExamTerm", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExamTerm)
            Me.columnSubject = New DataColumn("Subject", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubject)
            Me.columnObtained = New DataColumn("Obtained", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObtained)
            Me.columnOutof = New DataColumn("Outof", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOutof)
            Me.columnGrade = New DataColumn("Grade", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGrade)
            Me.columnExamDate = New DataColumn("ExamDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExamDate)
            Me.column_STUDENTS_NAME = New DataColumn("STUDENTS.NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_STUDENTS_NAME)
            Me.columnFRNAME = New DataColumn("FRNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFRNAME)
            Me.columnSECTIONNAME = New DataColumn("SECTIONNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSECTIONNAME)
            Me.column_CLASSMAIN_NAME = New DataColumn("CLASSMAIN.NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_CLASSMAIN_NAME)
        End Sub
        
        Public Function NewExamResultVWRow() As ExamResultVWRow
            Return CType(Me.NewRow,ExamResultVWRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ExamResultVWRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ExamResultVWRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ExamResultVWRowChangedEvent) Is Nothing) Then
                RaiseEvent ExamResultVWRowChanged(Me, New ExamResultVWRowChangeEvent(CType(e.Row,ExamResultVWRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ExamResultVWRowChangingEvent) Is Nothing) Then
                RaiseEvent ExamResultVWRowChanging(Me, New ExamResultVWRowChangeEvent(CType(e.Row,ExamResultVWRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ExamResultVWRowDeletedEvent) Is Nothing) Then
                RaiseEvent ExamResultVWRowDeleted(Me, New ExamResultVWRowChangeEvent(CType(e.Row,ExamResultVWRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ExamResultVWRowDeletingEvent) Is Nothing) Then
                RaiseEvent ExamResultVWRowDeleting(Me, New ExamResultVWRowChangeEvent(CType(e.Row,ExamResultVWRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveExamResultVWRow(ByVal row As ExamResultVWRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ExamResultVWRow
        Inherits DataRow
        
        Private tableExamResultVW As ExamResultVWDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableExamResultVW = CType(Me.Table,ExamResultVWDataTable)
        End Sub
        
        Public Property RegNo As Double
            Get
                Try 
                    Return CType(Me(Me.tableExamResultVW.RegNoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamResultVW.RegNoColumn) = value
            End Set
        End Property
        
        Public Property ExamYear As Integer
            Get
                Try 
                    Return CType(Me(Me.tableExamResultVW.ExamYearColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamResultVW.ExamYearColumn) = value
            End Set
        End Property
        
        Public Property ExamTerm As Integer
            Get
                Try 
                    Return CType(Me(Me.tableExamResultVW.ExamTermColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamResultVW.ExamTermColumn) = value
            End Set
        End Property
        
        Public Property Subject As String
            Get
                Try 
                    Return CType(Me(Me.tableExamResultVW.SubjectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamResultVW.SubjectColumn) = value
            End Set
        End Property
        
        Public Property Obtained As Double
            Get
                Try 
                    Return CType(Me(Me.tableExamResultVW.ObtainedColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamResultVW.ObtainedColumn) = value
            End Set
        End Property
        
        Public Property Outof As Double
            Get
                Try 
                    Return CType(Me(Me.tableExamResultVW.OutofColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamResultVW.OutofColumn) = value
            End Set
        End Property
        
        Public Property Grade As String
            Get
                Try 
                    Return CType(Me(Me.tableExamResultVW.GradeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamResultVW.GradeColumn) = value
            End Set
        End Property
        
        Public Property ExamDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableExamResultVW.ExamDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamResultVW.ExamDateColumn) = value
            End Set
        End Property
        
        Public Property _STUDENTS_NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableExamResultVW._STUDENTS_NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamResultVW._STUDENTS_NAMEColumn) = value
            End Set
        End Property
        
        Public Property FRNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableExamResultVW.FRNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamResultVW.FRNAMEColumn) = value
            End Set
        End Property
        
        Public Property SECTIONNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableExamResultVW.SECTIONNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamResultVW.SECTIONNAMEColumn) = value
            End Set
        End Property
        
        Public Property _CLASSMAIN_NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableExamResultVW._CLASSMAIN_NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableExamResultVW._CLASSMAIN_NAMEColumn) = value
            End Set
        End Property
        
        Public Function IsRegNoNull() As Boolean
            Return Me.IsNull(Me.tableExamResultVW.RegNoColumn)
        End Function
        
        Public Sub SetRegNoNull()
            Me(Me.tableExamResultVW.RegNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExamYearNull() As Boolean
            Return Me.IsNull(Me.tableExamResultVW.ExamYearColumn)
        End Function
        
        Public Sub SetExamYearNull()
            Me(Me.tableExamResultVW.ExamYearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExamTermNull() As Boolean
            Return Me.IsNull(Me.tableExamResultVW.ExamTermColumn)
        End Function
        
        Public Sub SetExamTermNull()
            Me(Me.tableExamResultVW.ExamTermColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSubjectNull() As Boolean
            Return Me.IsNull(Me.tableExamResultVW.SubjectColumn)
        End Function
        
        Public Sub SetSubjectNull()
            Me(Me.tableExamResultVW.SubjectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsObtainedNull() As Boolean
            Return Me.IsNull(Me.tableExamResultVW.ObtainedColumn)
        End Function
        
        Public Sub SetObtainedNull()
            Me(Me.tableExamResultVW.ObtainedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOutofNull() As Boolean
            Return Me.IsNull(Me.tableExamResultVW.OutofColumn)
        End Function
        
        Public Sub SetOutofNull()
            Me(Me.tableExamResultVW.OutofColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGradeNull() As Boolean
            Return Me.IsNull(Me.tableExamResultVW.GradeColumn)
        End Function
        
        Public Sub SetGradeNull()
            Me(Me.tableExamResultVW.GradeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExamDateNull() As Boolean
            Return Me.IsNull(Me.tableExamResultVW.ExamDateColumn)
        End Function
        
        Public Sub SetExamDateNull()
            Me(Me.tableExamResultVW.ExamDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_STUDENTS_NAMENull() As Boolean
            Return Me.IsNull(Me.tableExamResultVW._STUDENTS_NAMEColumn)
        End Function
        
        Public Sub Set_STUDENTS_NAMENull()
            Me(Me.tableExamResultVW._STUDENTS_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFRNAMENull() As Boolean
            Return Me.IsNull(Me.tableExamResultVW.FRNAMEColumn)
        End Function
        
        Public Sub SetFRNAMENull()
            Me(Me.tableExamResultVW.FRNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSECTIONNAMENull() As Boolean
            Return Me.IsNull(Me.tableExamResultVW.SECTIONNAMEColumn)
        End Function
        
        Public Sub SetSECTIONNAMENull()
            Me(Me.tableExamResultVW.SECTIONNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_CLASSMAIN_NAMENull() As Boolean
            Return Me.IsNull(Me.tableExamResultVW._CLASSMAIN_NAMEColumn)
        End Function
        
        Public Sub Set_CLASSMAIN_NAMENull()
            Me(Me.tableExamResultVW._CLASSMAIN_NAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ExamResultVWRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ExamResultVWRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ExamResultVWRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ExamResultVWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
